class - blueprint or plan or template 
 
     -> 2 components of class : Attributes , Methods 
 
  parameters 

    eg :  class     - class Student
         
         Attributes - name:str
                      roll_no:int
                      course:str


         methods - def set_stud(self,name,rollno,course):
                       self.name=name
                       self.roll_no=rollno
                       self.course=course

                  def display_stud(self):
                       print(self.name,self.roll_no,self.course) 

         display - stud1=Student()                            : created a student object ie student() , stud1 is the reference
                   stud1.set_stud("Souparna",7,"CSE")         : parameters 
                   stud1.display_stud()                       : 

self - current instance  (like students,employee ) : for taking atrrributes



object - created by using class
       - real world entity 



constructor : for initialising instance variable

python constructor :__init__ 
                   
                   : contructor automatically invokes while object creation 

                   : 

__str__ : string representation of object

funtionality - CRUD
                 C -  create
                 R -  read
                 U - update
                 D - delete


 args -
 kwargs -


inheritance - child class will aquire the attributes and methods from parent class

-> single inheritance
-> multilevel inheritance
-> multiple inheritance

polymorphism

-> method overloading
-> method overriding


    -> method overloading 

- one class
- same method different parameters
- recent method is going to implemented
- **args used instead of this in python 


    -> method overriding

- required minimum 2 class
- 2 class should be inherited  ( in a relationship ) 


abstraction - hiding necessary components from the user
            
            - methods contains only signatures 

            - it does n't provide the method defintion or implementation details , so that class is called abstract class

            - defintion is provided only to which class is going to inherit 

            - method without defintion is called abstractmethods

Note

- a class is said to be  abstract class , that should be inherited by abc class 
- a method is said to be abstract method , need to provide a decorator called abstractmethods


abstract class and abstractmethods are defined in abc python file

     class      abstractmethods
from abc import abstractmethods

class Car(ABC) - car is a abstract class


